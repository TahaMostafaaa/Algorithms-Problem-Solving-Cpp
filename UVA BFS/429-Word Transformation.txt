// ============================================================================
// Name        : Test.cpp
// Author      : Taha Mostafa
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
// ============================================================================

#include <bits/stdc++.h>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define sz(v)               ((int)((v).size()))
#define cin_int(x)			scanf("%d",&x)
#define cin_char(x)			scanf("%c",&x)
#define cout_int(x)			printf("%d",x)
#define cout_int_ln(x)		printf("%d\n",x)
#define cout_char(x)		printf("%c",x)
#define cout_char_ln(x)		printf("%c\n",x)
#define clr(v, d)           memset(v, d, sizeof(v))
#define rep(i, v)       for(int i=0;i<sz(v);++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)
 
typedef long long         ll;
const ll OO = 1e8;
 const int INF = (int)1e6;

const double EPS = (1e-7);
int dcmp(double x, double y) {  return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1; }
 
#define pb                  push_back
#define MP                  make_pair
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
#define PI acos(-1)
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;

map<string,int> vis;
int bfs_for_strings(string start, string to,map<string,vector<string> > gg)
{
	queue<string> q;
	q.push(start);
	vis[start] = 0;
	while(!q.empty()) {
	    string target = q.front();
	    q.pop();
	    if(target == to)
	    	return vis[target];
	    int sz = gg[target].size();
	    for (int i = 0; i < sz; ++i)
	    {
	    	string next = gg[target][i];
	    	if(vis[next] == -1)
	    	{
	    		vis[next] = vis[target] + 1;
	    		q.push(next);
	    	}
	    }

	}
}

int main() {

	#ifndef ONLINE_JUDGE
	freopen("input_here.in", "rt", stdin);
	// freopen("output_here.out", "wt", stdout);
	#endif
	
	int T,dif;
	string word,tmp;
	cin >> T;
	while(T--) {
	    
	    map<string,vector<string> > my_graph;
	    while(cin >> word && word != "*") {
	        my_graph[word];
	        vis[word] = -1;
	        map<string,vector<string> >::iterator it;
	        for ( it = my_graph.begin(); it != my_graph.end(); ++it)
	        {
	        	tmp = (*it).first;
	        	dif=0;
	        	if(tmp.size() == word.size())
	        	{
		        		for (int i = 0; i < word.size() && dif < 2; ++i)
		        	{
		        		if(word[i] != tmp[i])
		        			dif++;
		        	}
		        	if(dif == 1)
		        		{
		        			my_graph[word].push_back(tmp);
		        			my_graph[tmp].push_back(word);
		        		}
	      		}
	        }
	    }

	        string start,to,line;
	        getline(cin,line);
	         getline(cin,line);
	        int pos;
	        while(line != "") {
	        	pos = line.find(" ");
	            start = line.substr(0,pos);
	        to = line.substr(pos+1,line.size());
	        map<string,int>::iterator itr;
	        for (itr = vis.begin(); itr != vis.end(); ++itr)
	        (*itr).second = -1;
	        cout << line << " " << bfs_for_strings(start,to,my_graph) << endl;
	        if(!getline(cin,line))
	        	break;

	        }
	        if(T != 0)
	        		cout << endl;
	       
	    }
return 0;

}
