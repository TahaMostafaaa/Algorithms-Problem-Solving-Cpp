#include <bits/stdc++.h>
using namespace std;

#define INF 1e9
#define EPS 1e-9
#define PI acos(-1.0)

double degToRad(double d) {
	return d * PI / 180.0;
}
double radToDeg(double r) {
	return r * 180.0 / PI;
}

struct point {
	double x, y;
	point() {
		x = INF, y = INF;
	}
	point(double _x, double _y) {
		x = _x, y = _y;
	}
	bool operator <(point other) const {
		if (fabs(x - other.x) > EPS)
			return x < other.x;
		return y < other.y;
	}
};

double dist(point p1, point p2) {
	return hypot(p1.x - p2.x, p1.y - p2.y);
}

struct line {
	double a, b, c;
};

void pointsToLine(point p1, point p2, line &l) {
	if (fabs(p1.x - p2.x) < EPS) // vertical line
		l.a = 1.0, l.b = 0.0, l.c = -p1.x;
	else {
		l.a = -(double) (p1.y - p2.y) / (p1.x - p2.x);
		l.b = 1.0;
		l.c = -(double) (l.a * p1.x) - p1.y;
	}
}

struct vec {
	double x, y;
	vec(double _x, double _y) {
		x = _x, y = _y;
	}
};

vec toVector(point p1, point p2) {
	return vec(p2.x - p1.x, p2.y - p1.y);
}

vec scaleVector(vec v, double s) {
	return vec(v.x * s, v.y * s);
}

point translate(point p, vec v) {
	return point(p.x + v.x, p.y + v.y);
}

double dot(vec a, vec b) {
	return (a.x * b.x + a.y * b.y);
}

double norm_sq(vec v) {
	return v.x * v.x + v.y * v.y;
}

double distToLine(point p, point A, point B, point &c) {
	vec Ap = toVector(A, p), AB = toVector(A, B);
	double u = dot(Ap, AB) / norm_sq(AB);
	c = translate(A, scaleVector(AB, u));
	return dist(p, c);
}

double distToLineSegment(point p, point A, point B, point &c) {
	vec Ap = toVector(A, p), AB = toVector(A, B);
	double u = dot(Ap, AB) / norm_sq(AB);
	if (u < 0.0) {
		c = point(A.x, A.y);
		return dist(p, A);
	}
	if (u > 1.0) {
		c = point(B.x, B.y);
		return dist(p, B);
	}
	return distToLine(p, A, B, c);
}

double x,y,tmp;
void track2(string c, double steps)
{
	tmp = sqrt((steps*steps)/2.0);
	if(c == "NE") x+=tmp,y+=tmp;
	else if (c=="SW") x-=tmp,y-=tmp;
	else if (c=="NW") x-=tmp,y+=tmp;
	else x+=tmp,y-=tmp;
}
void track1(string c, double steps)
{
	if (c == "N") y+=steps; else if(c== "S") y-=steps; else if(c=="E")  x+=steps; else x-=steps;
}
int main() {

	#ifndef ONLINE_JUDGE
	freopen("input_here.in", "rt", stdin);
	// freopen("output_here.out", "wt", stdout);
	#endif
	string s;
	int t=0;
	while(cin >> s && s != "END") {
		x = y = 0;

		printf("Map #%d\n", ++t);
		double add,value;
	    for (int i = 0; i < s.size(); ++i)
	    {
	    	if(s[i] == ',')
	    		continue;
	    	add = 0;
	    	value =1;
	    	while(isdigit(s[i]))
	    	{
	    		add = (add*value) + (s[i]-'0');
	    		value = 10;
	  			i++;
	    	}
	    	
	    	string get="";
	    	if(isalpha(s[i]))
	    		{
	    			if(isalpha(s[i+1]))
	    			{
	    				get.push_back(s[i]);
	    				get.push_back(s[i+1]);
	    				track2(get,add);
	    				i++;
	    			}
		    		else
		    		{
		    			get.push_back(s[i]);
		    			track1(get,add);
		    		}
	    		}

	    }
	     printf("The treasure is located at (%.3lf,%.3lf).\n", x, y);
	     printf("The distance to the treasure is %.3lf.\n\n", sqrt(x*x+y*y));
	}
	
	return 0;
}